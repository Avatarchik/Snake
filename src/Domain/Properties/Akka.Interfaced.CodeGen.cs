// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region Domain.IGame

namespace Domain
{
    [PayloadTable(typeof(IGame), PayloadTableKind.Request)]
    public static class IGame_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Join_Invoke), typeof(Join_Return) },
                { typeof(Leave_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class Join_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.Int64 userId;
            [ProtoMember(2)] public System.String userName;
            [ProtoMember(3)] public Domain.IGameObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGame)__target).Join(userId, userName, observer);
                return (IValueGetable)(new Join_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class Join_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, Domain.GameInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGame)__target).Leave(userId);
                return null;
            }
        }
    }

    public interface IGame_NoReply
    {
        void Join(System.Int64 userId, System.String userName, Domain.IGameObserver observer);
        void Leave(System.Int64 userId);
    }

    public class GameRef : InterfacedActorRef, IGame, IGame_NoReply
    {
        public GameRef() : base(null)
        {
        }

        public GameRef(IActorRef actor) : base(actor)
        {
        }

        public GameRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGame_NoReply WithNoReply()
        {
            return this;
        }

        public GameRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GameRef(Actor, requestWaiter, Timeout);
        }

        public GameRef WithTimeout(TimeSpan? timeout)
        {
            return new GameRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<System.Int32, Domain.GameInfo>> Join(System.Int64 userId, System.String userName, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Join_Invoke { userId = userId, userName = userName, observer = observer }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, Domain.GameInfo>>(requestMessage);
        }

        public Task Leave(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGame_NoReply.Join(System.Int64 userId, System.String userName, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Join_Invoke { userId = userId, userName = userName, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IGame_NoReply.Leave(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGame
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGame Convert(IGame value)
        {
            if (value == null) return null;
            return new SurrogateForIGame { Actor = ((GameRef)value).Actor };
        }

        [ProtoConverter]
        public static IGame Convert(SurrogateForIGame value)
        {
            if (value == null) return null;
            return new GameRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IGameClient

namespace Domain
{
    [PayloadTable(typeof(IGameClient), PayloadTableKind.Request)]
    public static class IGameClient_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(ZoneMessage_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class ZoneMessage_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadTagOverridable
        {
            [ProtoMember(1)] public System.Byte[] bytes;
            [ProtoMember(2)] public System.Int32 clientId;

            public Type GetInterfaceType()
            {
                return typeof(IGameClient);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameClient)__target).ZoneMessage(bytes, clientId);
                return null;
            }

            void IPayloadTagOverridable.SetTag(object value)
            {
                clientId = (System.Int32)value;
            }
        }
    }

    public interface IGameClient_NoReply
    {
        void ZoneMessage(System.Byte[] bytes, System.Int32 clientId = 0);
    }

    public class GameClientRef : InterfacedActorRef, IGameClient, IGameClient_NoReply
    {
        public GameClientRef() : base(null)
        {
        }

        public GameClientRef(IActorRef actor) : base(actor)
        {
        }

        public GameClientRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGameClient_NoReply WithNoReply()
        {
            return this;
        }

        public GameClientRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GameClientRef(Actor, requestWaiter, Timeout);
        }

        public GameClientRef WithTimeout(TimeSpan? timeout)
        {
            return new GameClientRef(Actor, RequestWaiter, timeout);
        }

        public Task ZoneMessage(System.Byte[] bytes, System.Int32 clientId = 0)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameClient_PayloadTable.ZoneMessage_Invoke { bytes = bytes, clientId = clientId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGameClient_NoReply.ZoneMessage(System.Byte[] bytes, System.Int32 clientId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameClient_PayloadTable.ZoneMessage_Invoke { bytes = bytes, clientId = clientId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGameClient
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGameClient Convert(IGameClient value)
        {
            if (value == null) return null;
            return new SurrogateForIGameClient { Actor = ((GameClientRef)value).Actor };
        }

        [ProtoConverter]
        public static IGameClient Convert(SurrogateForIGameClient value)
        {
            if (value == null) return null;
            return new GameClientRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IGamePairMaker

namespace Domain
{
    [PayloadTable(typeof(IGamePairMaker), PayloadTableKind.Request)]
    public static class IGamePairMaker_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(RegisterPairing_Invoke), null },
                { typeof(UnregisterPairing_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class RegisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.Int64 userId;
            [ProtoMember(2)] public System.String userName;
            [ProtoMember(3)] public Domain.GameDifficulty difficulty;
            [ProtoMember(4)] public Domain.IUserPairingObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IGamePairMaker);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGamePairMaker)__target).RegisterPairing(userId, userName, difficulty, observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class UnregisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;

            public Type GetInterfaceType()
            {
                return typeof(IGamePairMaker);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGamePairMaker)__target).UnregisterPairing(userId);
                return null;
            }
        }
    }

    public interface IGamePairMaker_NoReply
    {
        void RegisterPairing(System.Int64 userId, System.String userName, Domain.GameDifficulty difficulty, Domain.IUserPairingObserver observer);
        void UnregisterPairing(System.Int64 userId);
    }

    public class GamePairMakerRef : InterfacedActorRef, IGamePairMaker, IGamePairMaker_NoReply
    {
        public GamePairMakerRef() : base(null)
        {
        }

        public GamePairMakerRef(IActorRef actor) : base(actor)
        {
        }

        public GamePairMakerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGamePairMaker_NoReply WithNoReply()
        {
            return this;
        }

        public GamePairMakerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GamePairMakerRef(Actor, requestWaiter, Timeout);
        }

        public GamePairMakerRef WithTimeout(TimeSpan? timeout)
        {
            return new GamePairMakerRef(Actor, RequestWaiter, timeout);
        }

        public Task RegisterPairing(System.Int64 userId, System.String userName, Domain.GameDifficulty difficulty, Domain.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.RegisterPairing_Invoke { userId = userId, userName = userName, difficulty = difficulty, observer = observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterPairing(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.UnregisterPairing_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGamePairMaker_NoReply.RegisterPairing(System.Int64 userId, System.String userName, Domain.GameDifficulty difficulty, Domain.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.RegisterPairing_Invoke { userId = userId, userName = userName, difficulty = difficulty, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IGamePairMaker_NoReply.UnregisterPairing(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.UnregisterPairing_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGamePairMaker
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGamePairMaker Convert(IGamePairMaker value)
        {
            if (value == null) return null;
            return new SurrogateForIGamePairMaker { Actor = ((GamePairMakerRef)value).Actor };
        }

        [ProtoConverter]
        public static IGamePairMaker Convert(SurrogateForIGamePairMaker value)
        {
            if (value == null) return null;
            return new GamePairMakerRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IUser

namespace Domain
{
    [PayloadTable(typeof(IUser), PayloadTableKind.Request)]
    public static class IUser_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(JoinGame_Invoke), typeof(JoinGame_Return) },
                { typeof(LeaveGame_Invoke), null },
                { typeof(RegisterPairing_Invoke), null },
                { typeof(UnregisterPairing_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class JoinGame_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public Domain.IGameObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IUser)__target).JoinGame(gameId, observer);
                return (IValueGetable)(new JoinGame_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class JoinGame_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public System.Tuple<Domain.IGameClient, System.Int32, Domain.GameInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    if (v.Item1 != null) updater(v.Item1);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class LeaveGame_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IUser)__target).LeaveGame(gameId);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class RegisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public Domain.GameDifficulty difficulty;
            [ProtoMember(2)] public Domain.IUserPairingObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IUser)__target).RegisterPairing(difficulty, observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class UnregisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IUser)__target).UnregisterPairing();
                return null;
            }
        }
    }

    public interface IUser_NoReply
    {
        void JoinGame(System.Int64 gameId, Domain.IGameObserver observer);
        void LeaveGame(System.Int64 gameId);
        void RegisterPairing(Domain.GameDifficulty difficulty, Domain.IUserPairingObserver observer);
        void UnregisterPairing();
    }

    public class UserRef : InterfacedActorRef, IUser, IUser_NoReply
    {
        public UserRef() : base(null)
        {
        }

        public UserRef(IActorRef actor) : base(actor)
        {
        }

        public UserRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUser_NoReply WithNoReply()
        {
            return this;
        }

        public UserRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<Domain.IGameClient, System.Int32, Domain.GameInfo>> JoinGame(System.Int64 gameId, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.JoinGame_Invoke { gameId = gameId, observer = observer }
            };
            return SendRequestAndReceive<System.Tuple<Domain.IGameClient, System.Int32, Domain.GameInfo>>(requestMessage);
        }

        public Task LeaveGame(System.Int64 gameId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke { gameId = gameId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task RegisterPairing(Domain.GameDifficulty difficulty, Domain.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.RegisterPairing_Invoke { difficulty = difficulty, observer = observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterPairing()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.UnregisterPairing_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUser_NoReply.JoinGame(System.Int64 gameId, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.JoinGame_Invoke { gameId = gameId, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.LeaveGame(System.Int64 gameId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke { gameId = gameId }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.RegisterPairing(Domain.GameDifficulty difficulty, Domain.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.RegisterPairing_Invoke { difficulty = difficulty, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.UnregisterPairing()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.UnregisterPairing_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUser
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUser Convert(IUser value)
        {
            if (value == null) return null;
            return new SurrogateForIUser { Actor = ((UserRef)value).Actor };
        }

        [ProtoConverter]
        public static IUser Convert(SurrogateForIUser value)
        {
            if (value == null) return null;
            return new UserRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IUserLogin

namespace Domain
{
    [PayloadTable(typeof(IUserLogin), PayloadTableKind.Request)]
    public static class IUserLogin_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Login_Invoke), typeof(Login_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class Login_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.String id;
            [ProtoMember(2)] public System.String password;
            [ProtoMember(3)] public Domain.IUserEventObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUserLogin);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IUserLogin)__target).Login(id, password, observer);
                return (IValueGetable)(new Login_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class Login_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public Domain.LoginResult v;

            public Type GetInterfaceType()
            {
                return typeof(IUserLogin);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    if (v.User != null) updater(v.User);
                }
            }
        }
    }

    public interface IUserLogin_NoReply
    {
        void Login(System.String id, System.String password, Domain.IUserEventObserver observer);
    }

    public class UserLoginRef : InterfacedActorRef, IUserLogin, IUserLogin_NoReply
    {
        public UserLoginRef() : base(null)
        {
        }

        public UserLoginRef(IActorRef actor) : base(actor)
        {
        }

        public UserLoginRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUserLogin_NoReply WithNoReply()
        {
            return this;
        }

        public UserLoginRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserLoginRef(Actor, requestWaiter, Timeout);
        }

        public UserLoginRef WithTimeout(TimeSpan? timeout)
        {
            return new UserLoginRef(Actor, RequestWaiter, timeout);
        }

        public Task<Domain.LoginResult> Login(System.String id, System.String password, Domain.IUserEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observer = observer }
            };
            return SendRequestAndReceive<Domain.LoginResult>(requestMessage);
        }

        void IUserLogin_NoReply.Login(System.String id, System.String password, Domain.IUserEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observer = observer }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserLogin
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUserLogin Convert(IUserLogin value)
        {
            if (value == null) return null;
            return new SurrogateForIUserLogin { Actor = ((UserLoginRef)value).Actor };
        }

        [ProtoConverter]
        public static IUserLogin Convert(SurrogateForIUserLogin value)
        {
            if (value == null) return null;
            return new UserLoginRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IGameObserver

namespace Domain
{
    [PayloadTable(typeof(IGameObserver), PayloadTableKind.Notification)]
    public static class IGameObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Abort_Invoke),
                typeof(Begin_Invoke),
                typeof(End_Invoke),
                typeof(Join_Invoke),
                typeof(Leave_Invoke),
                typeof(ZoneMessage_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class Abort_Invoke : IInterfacedPayload, IInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Abort();
            }
        }

        [ProtoContract, TypeAlias]
        public class Begin_Invoke : IInterfacedPayload, IInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Begin();
            }
        }

        [ProtoContract, TypeAlias]
        public class End_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int32 winnerId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).End(winnerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Join_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;
            [ProtoMember(2)] public System.String userName;
            [ProtoMember(3)] public System.Int32 clientId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Join(userId, userName, clientId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Leave(userId);
            }
        }

        [ProtoContract, TypeAlias]
        public class ZoneMessage_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Byte[] bytes;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).ZoneMessage(bytes);
            }
        }
    }

    public class GameObserver : InterfacedObserver, IGameObserver
    {
        public GameObserver()
            : base(null, 0)
        {
        }

        public GameObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public GameObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void Abort()
        {
            var payload = new IGameObserver_PayloadTable.Abort_Invoke {  };
            Notify(payload);
        }

        public void Begin()
        {
            var payload = new IGameObserver_PayloadTable.Begin_Invoke {  };
            Notify(payload);
        }

        public void End(System.Int32 winnerId)
        {
            var payload = new IGameObserver_PayloadTable.End_Invoke { winnerId = winnerId };
            Notify(payload);
        }

        public void Join(System.Int64 userId, System.String userName, System.Int32 clientId)
        {
            var payload = new IGameObserver_PayloadTable.Join_Invoke { userId = userId, userName = userName, clientId = clientId };
            Notify(payload);
        }

        public void Leave(System.Int64 userId)
        {
            var payload = new IGameObserver_PayloadTable.Leave_Invoke { userId = userId };
            Notify(payload);
        }

        public void ZoneMessage(System.Byte[] bytes)
        {
            var payload = new IGameObserver_PayloadTable.ZoneMessage_Invoke { bytes = bytes };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIGameObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIGameObserver Convert(IGameObserver value)
        {
            if (value == null) return null;
            var o = (GameObserver)value;
            return new SurrogateForIGameObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IGameObserver Convert(SurrogateForIGameObserver value)
        {
            if (value == null) return null;
            return new GameObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
#region Domain.IUserEventObserver

namespace Domain
{
    [PayloadTable(typeof(IUserEventObserver), PayloadTableKind.Notification)]
    public static class IUserEventObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(UserContextChange_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class UserContextChange_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public Domain.TrackableUserContextTracker userContextTracker;

            public Type GetInterfaceType()
            {
                return typeof(IUserEventObserver);
            }

            public void Invoke(object __target)
            {
                ((IUserEventObserver)__target).UserContextChange(userContextTracker);
            }
        }
    }

    public class UserEventObserver : InterfacedObserver, IUserEventObserver
    {
        public UserEventObserver()
            : base(null, 0)
        {
        }

        public UserEventObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public UserEventObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void UserContextChange(Domain.TrackableUserContextTracker userContextTracker)
        {
            var payload = new IUserEventObserver_PayloadTable.UserContextChange_Invoke { userContextTracker = userContextTracker };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserEventObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIUserEventObserver Convert(IUserEventObserver value)
        {
            if (value == null) return null;
            var o = (UserEventObserver)value;
            return new SurrogateForIUserEventObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IUserEventObserver Convert(SurrogateForIUserEventObserver value)
        {
            if (value == null) return null;
            return new UserEventObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
#region Domain.IUserPairingObserver

namespace Domain
{
    [PayloadTable(typeof(IUserPairingObserver), PayloadTableKind.Notification)]
    public static class IUserPairingObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(MakePair_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class MakePair_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public System.String opponentName;

            public Type GetInterfaceType()
            {
                return typeof(IUserPairingObserver);
            }

            public void Invoke(object __target)
            {
                ((IUserPairingObserver)__target).MakePair(gameId, opponentName);
            }
        }
    }

    public class UserPairingObserver : InterfacedObserver, IUserPairingObserver
    {
        public UserPairingObserver()
            : base(null, 0)
        {
        }

        public UserPairingObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public UserPairingObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void MakePair(System.Int64 gameId, System.String opponentName)
        {
            var payload = new IUserPairingObserver_PayloadTable.MakePair_Invoke { gameId = gameId, opponentName = opponentName };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserPairingObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIUserPairingObserver Convert(IUserPairingObserver value)
        {
            if (value == null) return null;
            var o = (UserPairingObserver)value;
            return new SurrogateForIUserPairingObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IUserPairingObserver Convert(SurrogateForIUserPairingObserver value)
        {
            if (value == null) return null;
            return new UserPairingObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
